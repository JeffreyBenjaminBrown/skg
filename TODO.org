* find the root ancestor
* represent a document in Rust, via JSON
** add an optional "focused" node to the YAML
* Export from TypeDB to files?
* persist TypeDB data
  consider too how Tantivy data is persisted
* constraints
** test each constraint of the schema
   Some violations might not be representable in the .skg format.
** Can a file include multiple comments_on properties?
   It shouldn't.
** `contains` should be acyclic
   The TypeDB AI says I can use `distinct` instead,
   but the docs on `distinct` don't suggest that's true.
* optimizations
** unify Tantivy and TypeDB indexation
** If `titles` were the first field in the .skg format
   then the Tantivy indexing would need to read less
* later
** Verify cardinality constraints are working.
   It should be impossible to make a node
   be contained by two different nodes.
** A function should test that all IDs are distinct in the repo.
