alternative next steps
* send edits from Emacs
First don't make editing any different.
** how to interpret what Emacs sends back
Bullets with no ID property become new nodes.
If any of the nodes received (even the root!)
is already contained in something in the graph,
complain.
** how to act on what Emacs sends back
   Edit the files. Orphaned content becomes uncontained.
   Then update the index based on the edited files.
* Could I in Emacs make pasting modify the copy of the pasted text that's still in the kill ring?
** why
   That way I could paste it first with IDs,
   then strip the IDs from the copy of it in the kill ring.
** It looks possible.
*** Q
 In Emacs, if I cut a string using (say) C-w, it goes to the kill-ring, yes? And if I then paste it (C-y), a copy of it stays in the kill-ring, yes?

 In the minor mode (extension of org-mode) that I'm making, I would like pasting it to affect the copy of it that's still in the kill ring. Specifically, if the text I copied had an "id" property, then when I paste it, it should retain that property, but should lose it in the kill-ring, such that if I later paste the same string, it will not have an ID.

 Is this possible?
*** A, Claude
 (defun my-org-mode-yank-advice (orig-fun &rest args)
   "Advice to run before `yank` that handles ID properties in pasted text.
 After pasting text with an ID property, removes that property from the kill-ring."
   ;; Call the original yank function
   (apply orig-fun args)

   ;; Check if the yanked text had an ID property
   (let* ((start (mark t))
          (end (point))
          (id-prop (when start (get-text-property start 'id))))

     ;; If we found an ID property in the yanked text
     (when id-prop
       ;; Get current kill-ring entry (what we just yanked)
       (let* ((last-yank (car kill-ring))
              ;; Create a copy without the ID property
              (modified-yank (copy-sequence last-yank)))

         ;; Remove the ID property from the copy
         (remove-text-properties 0 (length modified-yank) '(id nil) modified-yank)

         ;; Replace the entry in the kill-ring
         (setcar kill-ring modified-yank)))))

 (define-minor-mode my-org-extension-mode
   "Minor mode extending org-mode with special ID handling."
   :lighter " MyOrg"
   (if my-org-extension-mode
       ;; Enable the mode
       (advice-add 'yank :around #'my-org-mode-yank-advice)
     ;; Disable the mode
     (advice-remove 'yank #'my-org-mode-yank-advice)))
** how I would modify the suggestion
   It assumes we only ever yank the last thing in the kill-ring.
   But yanking with a prefix argument yanks older entries.
   One approach would be to think about those prefix arguments.
   An easier one would be to strip the "id" property from everything in the kill ring -- but only if that "id" value is equal to the "id" of the yanked text.
* decide about subscriptions in the content view
  It seems like they should be inlined, rather than links.
  But one should be able to create a separate buffer,
  consisting of only the subscription view,
  or toggling between that
  and the view with no subscription lensing.
* blocked by one of the above
** collect subscriptions in content-view
** use unsubscriptions
   Ideally these would be collected as part of the document-building process. One builds a vector of (node,[unsubscription]) pairs from the root node through the contains-path to the node currently being processed. All unsubscriptions in that vector apply to this node.
* less conceptual
** persist TypeDB data
   consider too how Tantivy data is persisted
** automate the test of recursive_s_expression_from_node
*** in tests/content_view.rs
*** currently it prints to screen
** graph constraints
*** test each constraint of the schema
    Some violations might not be representable in the .skg format.
*** Can a file include multiple comments_on properties?
    It shouldn't.
*** `contains` should be acyclic
    The TypeDB AI says I can use `distinct` instead,
    but the docs on `distinct` don't suggest that's true.
*** Ttest that all IDs are distinct in the repo.
    maybe in Rust, not TypeDB
** optimizations
*** unify Tantivy and TypeDB indexation
*** If `titles` were the first field in the .skg format
    then the Tantivy indexing would need to read less
