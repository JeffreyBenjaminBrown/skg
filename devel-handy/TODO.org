* simplify
** make title a single field
   using multiple is needlessly complex at this stage
** Redesign types.
*** motivation
    There are no OrgNodes or FileNodes.
    The clean separation is between data stored on disk,
    data interpreted from disk into TypeDB (hyperlinks),
    and data regarding the view (folded, focused, repeated).
*** extant types
**** pub struct OrgNode {
   pub id       : Option<ID>,
   pub heading  : String,
   pub body     : Option<String>
   pub folded   : bool,
   pub focused  : bool,
   pub repeated : bool,
   pub branches : Vec<OrgNode>, }
**** pub struct FileNode {
   pub titles: Vec<String>,
   pub ids: Vec<ID>,
   pub body: Option<String>,
   pub contains: Vec<ID>,
   pub subscribes_to: Vec<ID>,
   pub hides_in_subscriptions: Vec<ID>,
   pub replaces_view_of: Vec<ID>,
   pub path: PathBuf,
   pub hyperlinks: Vec<Hyperlink>,
*** new types
**** graph data
   pub id                       : Option<ID>,
   pub heading                  : String,
   pub body                     : Option<String>
   pub contains                 : Vec<ID>,
   pub subscribes_to            : Vec<ID>,
   pub ignores_in_subscriptions : Vec<ID>,
   pub replaces_view_of         : Vec<ID>,
   pub path                     : PathBuf,
   pub hyperlinks               : Vec<Hyperlink>,
**** view data
   pub folded   : bool,
   pub focused  : bool,
   pub repeated : bool,
* resume in rust/save/
  serial
** use the `folded` field in OrgNode
   Rust will need this in order to restore state
   when it sends the document (with some new IDs)
   back to Emacs.
** write to disk, then Tantivy and TypeDB
*** update files
    Compare each FileNode received (after interpretation) from Emacs to the file it corresponds to. Read the TypeDB db to see if an ID (which might not be the primary one) corresponds to something extant.
    If the file is absent, create it.
    If the file differs in any way from the FileNode, update it.
    Keep a list of paths to all files modified or created. For files modified, track whether their text, content and/or hyperlinks have changed.
    Orphaned content becomes uncontained, not deleted.
*** update TypeDB
    If a file is new, load it as normal.
    Create relationships only after loading all entities (as is currently the case on initial load) so that all members of each relationship to create exist.
    If a file was modified, delete and recreate all of its out-links (hyperlinks, content, subscriptions). Change none of its other ("incoming") links.
*** to Tantivy
    If a file is new, load it as normal.
    If a file's text was modified, reload it.
** [[id:e707ded7-ff36-41cf-8ae1-672ab78e30d4][send new document from Rust]]
