* see also [[../docs/progress.md][progress.md]]
* closing the read/save knot
** Why is this so hard?
** sketch
*** Get data from Emacs.
**** Permanent data.
**** Ephemeral view properties.
*** Update FS, DB, index (titles).
**** Don't obliterate extra ids!
     The FileNode created from an OrgNode will only have one ID.
     But that might just be one of the OrgNode's IDs.
*** Rebuild document
    with the same folded and focused nodes.
*** Send document.
** Keep the `repeated` field.
   When a document is created, `repeated` is sent to Emacs so that it knows to font the repeats differently from the original.
   It should be sent back to Rust to know whether to disregard a node's data. The user might move a node marked `repeated` to before the first (reference) node with that ID. Retaining this field permits Rust to know which one is the reference node.
** Rebuild the whole document when returning it.
   Less efficient but way easier.
** Retain a set of folded nodes, and the ID of the focused one.
** (OrgNode -> FileNode) -> (OrgNode -> (FileNode, ephemeral view data))
** use the `folded` field in OrgNode
   Rust will need this in order to restore state
   when it sends the document (with some new IDs)
   back to Emacs.
** write to disk, then Tantivy and TypeDB
*** update files
    Compare each FileNode received (after interpretation) from Emacs to the file it corresponds to. Read the TypeDB db to see if an ID (which might not be the primary one) corresponds to something extant.
    If the file is absent, create it.
    If the file differs in any way from the FileNode, update it.
    Keep a list of paths to all files modified or created. For files modified, track whether their text, content and/or hyperlinks have changed.
    Orphaned content becomes uncontained, not deleted.
*** update TypeDB
    If a file is new, load it as normal.
    Create relationships only after loading all entities (as is currently the case on initial load) so that all members of each relationship to create exist.
    If a file was modified, delete and recreate all of its out-links (hyperlinks, content, subscriptions). Change none of its other ("incoming") links.
*** to Tantivy
    If a file is new, load it as normal.
    If a file's text was modified, reload it.
** [[id:e707ded7-ff36-41cf-8ae1-672ab78e30d4][send new document from Rust]]
* in docs
** Didactically, concept maps > knowledge graph.
** [[../docs/data-model.md][The data model]] and [[../docs/sharing-model.md][The sharing model]] overlap
   as documents.
* maybe rename `contains` -> `presents`
* the db_name "skg-test" should not be hardcoded
