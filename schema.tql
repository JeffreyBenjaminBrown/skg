define

  # A probably-unique identifier for a node.
  # (Note that nodes can have multiple IDs -- see `extra_id` below.)
  attribute id, value string;

  # A place in the filesystem.
  attribute path, value string;

  # "The graph" is made of nodes, which resemble org-headlines.
  entity node,
    owns id @key,
    owns path @unique,
    plays contains:container,
    plays contains:contained,
    plays links_to:source,
    plays links_to:dest,
    plays comments_on:commenter,
    plays comments_on:commentee,
    plays subscribes:subscriber,
    plays subscribes:subscribee,
    plays unsubscribes:unsubscriber,
    plays unsubscribes:unsubscribee,
    plays replaces_view:replacement,
    plays replaces_view:replaced,
    plays has_extra_id:node;

  entity extra_id,
    # A typical node only has one ID, its primary key. But when nodes are merged, `extra_id` is used to associate more than one ID with the merge result. The naming is a little awkward, because an `extra_id` is not itself an `id`; rather, it has an `id` field. (If attributes could be members of relationships, the `extra_id` entity would not be needed.)
    owns id @key,
    plays has_extra_id:extra_id;

  relation has_extra_id,
    relates node,
    relates extra_id @card(1..1);

  # Like the relationship from an org headline to its subheadlines,
  # or from an org file (title) to its headlines.
  # See `docs/content-model.md` for details.
  relation contains,
    relates container,
    relates contained @card(1..1);

  # Derived from the node's text content (of which TypeDB is unaware).
  # Links are org-roam style plain text. That is, they look like:
  #  [[id:<id>][<label>]]
  relation links_to,
    relates source,
    relates dest;

  # To understand subscribes, unsubscribes and replaces_view,
  # see `docs/sharing-model.md`.
  relation subscribes,
    relates subscriber,
    relates subscribee;
  relation unsubscribes,
    relates unsubscriber,
    relates unsubscribee;
  relation replaces_view,
    relates replacement,
    relates replaced;

  # Unused, so far.
  relation comments_on,
    relates commenter @card(1..1),
    relates commentee;
